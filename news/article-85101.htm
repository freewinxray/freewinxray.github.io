<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freewinxray.github.io/news/article-85101.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>springboot 定义统一返回结果</title>
        <meta name="description" content="前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种： 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下： { &" />
        <link rel="icon" href="/assets/website/img/freewinxray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free WinXray节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freewinxray.github.io/news/article-85101.htm" />
    <meta property="og:site_name" content="Free WinXray节点订阅站" />
    <meta property="og:title" content="springboot 定义统一返回结果" />
    <meta property="og:image" content="https://freewinxray.github.io/uploads/20240729/2815747b4944a6f9a7d4e4718cadfa94.webp" />
        <meta property="og:release_date" content="2025-03-31T08:39:20" />
    <meta property="og:updated_time" content="2025-03-31T08:39:20" />
        <meta property="og:description" content="前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种： 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下： { &" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="springboot 定义统一返回结果">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Roboto:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/freewinxray/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/freewinxray/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F73D4FMVSX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F73D4FMVSX');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="d-flex align-items-center">
        <div class="container d-flex align-items-center justify-content-between">
            <a href="/">
                        <span class="logo">Free WinXray</span>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main" data-aos="fade-up">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>springboot 定义统一返回结果</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <section class="inner-page">
            <div class="container">
                <div class="row">
                    <div class="col-md-9 xcblog-blog-list">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种：<br /> 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下：</p> <pre><code>{ &nbsp; &nbsp; "code": "200", &nbsp; &nbsp; "msg": "SUCCESS" }</code></pre> <p>&nbsp;2.&nbsp;&nbsp; &nbsp;返回相应的状态及数据，格式如下：</p> <pre><code class="language-javascript">{ &nbsp; &nbsp; "code": "200", &nbsp; &nbsp; "msg": "查询成功", &nbsp; &nbsp; "result": { &nbsp; &nbsp; &nbsp; &nbsp; "id": 10, &nbsp; &nbsp; &nbsp; &nbsp; "name": "张三", &nbsp; &nbsp; &nbsp; &nbsp; "emil": "1234456@qq.com", &nbsp; &nbsp; &nbsp; &nbsp; "phone": null, &nbsp; &nbsp; &nbsp; &nbsp; "address": "测试地址" &nbsp; &nbsp; } }</code></pre> <p>&nbsp;状态代码定义如下：<br /> &nbsp; &nbsp;code : 请求处理状态</p> <ul> <li>&nbsp; &nbsp;&nbsp; &nbsp;200: 请求处理成功</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;400: 请求处理失败</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;500: 服务器内部错误</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;401未认证（签名错误）</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;404接口不存在</li> </ul> <p>Springboot中我们可以使用泛型来定义统一的返回结果：<br /> 1. 先定义只返回状态的Result</p> <pre><code class="language-java">package com.example.demo.base;  import com.alibaba.fastjson.JSON;  public class Result {     private String code;     private String msg;      public String getCode() {         return code;     }      public void setCode(String code) {         this.code = code;     }      public String getMsg() {         return msg;     }      public void setMsg(String msg) {         this.msg = msg;     }      @Override     public String toString() {         return JSON.toJSONString(this);     } }</code></pre> <p>定义即有数据又有返回状态的DateResult</p> <pre><code class="language-java">package com.example.demo.base;  import java.io.Serializable;  public class DateResult&lt;T&gt; extends Result implements Serializable {     private T result;      public T getResult() {         return (T) result;     }      public void setResult(T result) {         this.result = result;     }  }</code></pre> <p>定义响应码枚举</p> <pre><code class="language-java">package com.example.demo.base;  /**  * 响应码枚举  */ public enum ResultCode {     SUCCESS("200"), //成功     FAIL("400"), //失败     UNAUTHORIZED("401"), //未认证（签名错误）     NOT_FOUND("404"), //接口不存在     INTERNAL_SERVER_ERROR("500");//服务器内部错误      private final String code;      ResultCode(String code) {         this.code = code;     }      public String code() {         return code;     } }</code></pre> <p>&nbsp;在Controller类中使用方法如下：</p> <pre><code class="language-java">package com.example.demo.controller;  import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;  import com.example.demo.base.DateResult; import com.example.demo.base.Result; import com.example.demo.base.ResultCode; import com.example.demo.entity.User;  @RestController @RequestMapping("/user") public class UserController {     @PostMapping("/update")     public Result updateUser(@RequestParam Integer id) {         Result result = new Result();         //相应的逻辑更新逻辑......... 假如更新成功         result.setCode(ResultCode.SUCCESS.code());         result.setMsg("更新成功");         return result;     }      @RequestMapping("/detail")     public DateResult&lt;User&gt; queryUser(@RequestParam Integer id) {         User user = new User();         user.setId(10);         user.setName("张三");         user.setEmil("1234456@qq.com");         user.setAddress("测试地址");         DateResult&lt;User&gt; dateResult = new DateResult&lt;User&gt;();         dateResult.setCode(ResultCode.SUCCESS.code());         dateResult.setMsg("查询成功");         dateResult.setResult(user);         return dateResult;     } }</code></pre> <p>实体类User代码如下：</p> <pre><code class="language-java">package com.example.demo.entity;  import java.io.Serializable;  import com.alibaba.fastjson.JSON;  public class User implements Serializable {     private Integer id;     private String  name;     private String  emil;     private String  phone;     private String  address;      public Integer getId() {         return id;     }      public void setId(Integer id) {         this.id = id;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getEmil() {         return emil;     }      public void setEmil(String emil) {         this.emil = emil;     }      public String getPhone() {         return phone;     }      public void setPhone(String phone) {         this.phone = phone;     }      public String getAddress() {         return address;     }      public void setAddress(String address) {         this.address = address;     }      @Override     public String toString() {         return JSON.toJSONString(this);     } }</code></pre> <p>先测试没有数据的返回格式，测试结果如下：</p> <p style="text-align:center;"><img decoding="async" alt="无数据的返回格式" src="http://img.555519.xyz/uploads3/20220820/b2ad81d65c25d1a6854994482fb4ba83.jpg"></p> <p>测试有返回数据的格式，测试结果如下：</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220820/14ae42d1b0347a2344fca128d10ad03a.jpg"></p> <p>如上的返回结果，我们需要在controller类中每次都需要new一个返回对象比较麻烦，我们可以新建一个ResultUtil</p> <pre><code class="language-java">package com.example.demo.base;  /**  * 响应结果生成工具  */ public class ResultUtil {     private static final String DEFAULT_SUCCESS_MESSAGE = "SUCCESS";      public static Result genSuccessResult() {          Result result = new Result();         result.setCode(ResultCode.SUCCESS.code());         result.setMsg(DEFAULT_SUCCESS_MESSAGE);         return result;     }      public static &lt;T&gt; DateResult&lt;T&gt; genSuccessResult(T data) {         DateResult&lt;T&gt; dateResult = new DateResult&lt;T&gt;();         dateResult.setCode(ResultCode.SUCCESS.code());         dateResult.setMsg(DEFAULT_SUCCESS_MESSAGE);         dateResult.setResult(data);         return dateResult;     }  }</code></pre> <p>&nbsp;controller 类的代码修改如下：</p> <pre><code class="language-java">package com.example.demo.controller;  import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;  import com.example.demo.base.DateResult; import com.example.demo.base.Result; import com.example.demo.base.ResultUtil; import com.example.demo.entity.User;  @RestController @RequestMapping("/user") public class UserController {     @PostMapping("/update")     public Result updateUser(@RequestParam Integer id) {          return ResultUtil.genSuccessResult();     }      @RequestMapping("/detail")     public DateResult&lt;User&gt; queryUser(@RequestParam Integer id) {         User user = new User();         user.setId(10);         user.setName("张三");         user.setEmil("1234456@qq.com");         user.setAddress("测试地址");         return ResultUtil.genSuccessResult(user);     } }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-85100.htm">双向带头循环链表（详解）</a></p>
                                        <p>下一个：<a href="/news/article-85829.htm">Nacos基本使用：注册中心、配置中心</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-9-free-node-subscribe.htm" title="「3月9日」最高速度20.6M/S，2025年WinXray每天更新免费节点订阅链接">「3月9日」最高速度20.6M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-24-free-high-speed-nodes.htm" title="「3月24日」最高速度18.9M/S，2025年WinXray每天更新免费节点订阅链接">「3月24日」最高速度18.9M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-free-subscribe-node.htm" title="「3月12日」最高速度20.7M/S，2025年WinXray每天更新免费节点订阅链接">「3月12日」最高速度20.7M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-75372.htm" title="动物医院好评150字 动物医院好评150字怎么写">动物医院好评150字 动物医院好评150字怎么写</a></li>
                        <li class="py-2"><a href="/news/article-78091.htm" title="查看pytorch运行时真正调用的cuda版本">查看pytorch运行时真正调用的cuda版本</a></li>
                        <li class="py-2"><a href="/news/article-66227.htm" title="动物疫苗的储存（动物疫苗的储存温度）">动物疫苗的储存（动物疫苗的储存温度）</a></li>
                        <li class="py-2"><a href="/news/article-84382.htm" title="流浪猫来预示着家里要死人了（流浪猫来预示着家里要死人了有依据吗）">流浪猫来预示着家里要死人了（流浪猫来预示着家里要死人了有依据吗）</a></li>
                        <li class="py-2"><a href="/news/article-72706.htm" title="湖北宠物食品生产企业（宠物食品 公司）">湖北宠物食品生产企业（宠物食品 公司）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-winxray-node.htm" title="「3月5日」最高速度19.1M/S，2025年WinXray每天更新免费节点订阅链接">「3月5日」最高速度19.1M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-78092.htm" title="我要看动物医院英语（动物医院用英语怎么读）">我要看动物医院英语（动物医院用英语怎么读）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container py-4">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                Free WinXray节点订阅站 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <div id="preloader"></div>
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/freewinxray/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/swiper/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/waypoints/noframework.waypoints.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/freewinxray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>