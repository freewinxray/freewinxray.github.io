<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freewinxray.github.io/news/article-86530.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>快速掌握AsyncI-新手入门</title>
        <meta name="description" content="asyncio是从Python 3.4+开始引入的标准库，从而支持async IO，协程(coroutine)。  举个例子：假设有1个洗衣房，里面有10台洗衣机，有一个洗衣工在负责这10台洗衣机。那" />
        <link rel="icon" href="/assets/website/img/freewinxray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free WinXray节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freewinxray.github.io/news/article-86530.htm" />
    <meta property="og:site_name" content="Free WinXray节点订阅站" />
    <meta property="og:title" content="快速掌握AsyncI-新手入门" />
    <meta property="og:image" content="https://freewinxray.github.io/uploads/20240729/ffd9ddd60cf93f7cabc97ba4e743fa9c.webp" />
        <meta property="og:release_date" content="2025-04-02T07:43:10" />
    <meta property="og:updated_time" content="2025-04-02T07:43:10" />
        <meta property="og:description" content="asyncio是从Python 3.4+开始引入的标准库，从而支持async IO，协程(coroutine)。  举个例子：假设有1个洗衣房，里面有10台洗衣机，有一个洗衣工在负责这10台洗衣机。那" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="快速掌握AsyncI-新手入门">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Roboto:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/freewinxray/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freewinxray/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/freewinxray/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F73D4FMVSX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F73D4FMVSX');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="d-flex align-items-center">
        <div class="container d-flex align-items-center justify-content-between">
            <a href="/">
                        <span class="logo">Free WinXray</span>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main" data-aos="fade-up">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>快速掌握AsyncI-新手入门</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <section class="inner-page">
            <div class="container">
                <div class="row">
                    <div class="col-md-9 xcblog-blog-list">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <blockquote> <p>asyncio是从Python 3.4+开始引入的标准库，从而支持async IO，协程(coroutine)。</p> </blockquote> <p>举个例子：假设有1个洗衣房，里面有10台洗衣机，有一个洗衣工在负责这10台洗衣机。那么洗衣房就相当于1个进程，洗衣工就相当1个线程。如果有10个洗衣工，就相当于10个线程，1个进程是可以开多线程的。这就是多线程！</p> <p>那么协程呢？先不急。大家都知道，洗衣机洗衣服是需要等待时间的，如果10个洗衣工，1人负责1台洗衣机，这样效率肯定会提高，但是不觉得浪费资源吗？明明1 个人能做的事，却要10个人来做。只是把衣服放进去，打开开关，就没事做了，等衣服洗好再拿出来就可以了。就算很多人来洗衣服，1个人也足以应付了，开好第一台洗衣机，在等待的时候去开第二台洗衣机，再开第三台，……直到有衣服洗好了，就回来把衣服取出来，接着再取另一台的（哪台洗好先就取哪台，所以协程是无序的）。这就是计算机的协程！洗衣机就是执行的方法。</p> <p><strong>当你程序中方法需要等待时间的话，就可以用协程，效率高，消耗资源少。</strong></p> <p>好了！现在来总结一下：</p> <p>洗衣房 ==&gt; 进程</p> <p>洗衣工 ==&gt; 线程</p> <p>洗衣机 ==&gt; 方法（函数）</p> <h2><a id="1_async_await_20" rel="nofollow"></a>1. async await</h2> <p>函数前+async keyword时，实际上是创建了这个函数的wrapper，当调用这个函数时，实际上会返回一个coroutine object</p> <p>首先 正常使用async awit</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python"><span class="token operator">&lt;</span>coroutine<span class="token builtin">object</span> main at<span class="token number">0x7feada389ec0</span><span class="token operator">&gt;</span> RuntimeWarning<span class="token punctuation">:</span> coroutine<span class="token string">'main'</span> was never awaited<span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> RuntimeWarning<span class="token punctuation">:</span> Enable tracemalloc to get the<span class="token builtin">object</span> allocation traceback</code></pre> <p>coroutine object与正常function不同，如果要等待coroutine object的执行结果，需要使用keyword<code>await</code>来等待coroutine完成返回的结果。我们来试试<code>await</code>:</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">File<span class="token string">"/Users/xxx/PycharmProjects/pythonProject/test_ansy.py"</span><span class="token punctuation">,</span> line<span class="token number">15</span><span class="token keyword">await</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">^</span> SyntaxError<span class="token punctuation">:</span><span class="token string">'await'</span> outside function</code></pre> <p>await 只能在async函数中使用。但是await要在async函数中使用，而要跑async函数，需要await等待返回结果。需要使用event-loop</p> <h2><a id="2_Eventloop_63" rel="nofollow"></a>2. Event-loop</h2> <blockquote> <p>Event-Loop是一个在程序中等待并分发事件或者消息的设计模式</p> </blockquote> <p><strong>Python coroutine需要跑在event-loop中</strong></p> <p>asyncio这个包中提供了一个asyncio.run的函数，可以作为coroutine的入口，<code>asyncio.run</code>会创建一个event-loop，然后将传递给他的coroutine object执行在这个event-loop上，通常<code>asyncio.run</code>这个函数在程序中只会被调用一次，作为coroutine的入口</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World</code></pre> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 当前coroutine放弃运行，等待5秒后返回</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo done</code></pre> <p><code>asyncio.new_event_loop()</code>来创建一个新的Event-Loop然后通过<code>loop.run_until_complete()</code>来启动一个coroutine</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up foo"</span><span class="token punctuation">)</span>  loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo foo done</code></pre> <h2><a id="3_task_136" rel="nofollow"></a>3. task</h2> <p>当foo函数sleep的时候，我们不希望等待他结束，我们希望在此期间做一些别的事情，可以使用<code>asyncio.create_task</code>.asyncio.create_task 会获取当前正在运行的event-loop，然后再这个loop上schedule一个task。这个task会<strong>尽可能快的</strong>开始运行。Task是一个Future-like的object(Future后面会提到)，这个object上运行着一个coroutine，Task存在的意义在于让用户在Event-Loop上运行coroutine。那么为什么说是<strong>尽可能快的呢</strong>？先看接下来这个例子</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>     task<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">await</span> task<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World foo done I am foo wake up</code></pre> <p>Surprise! “foo done"在"I am foo"之前被print了出来，这是因为create_task只是在Running Event-Loop上schedule了一个task，并没有立刻开始运行，因为main还没有暂停执行进入等待，也没执行结束，所以main会继续执行。当main执行到<code>await task</code>时，main暂停执行进入等待，下一个在Event-Loop上的task才开始执行，也就是foo。所以我们先看到了"foo done”，然后才是"I am foo"。接下来foo进入了sleep，暂停执行进入等待，而main()在等待foo的执行结果，Event-Loop上已经没有其他可以继续执行的task了，所以程序等待foo的<code>asyncio.sleep(1)</code>结束，最后print “wake up”。</p> <p>以上这种scheduling的方式叫做cooperative scheduling，一个Event-Loop在同一时间只运行一个Task。当一个Task awaits另一个Task(Future)完成时，当前Task会暂时停止执行，等待Future的结果，然后Event-Loop会让别的Task，Future callback(后面有提到)，或者IO开始执行。</p> <p>这里就要提到asyncio.Future的定义了。</p> <h2><a id="Future_173" rel="nofollow"></a>Future</h2> <p><code>asyncio.create_task</code>的返回是task，task的定义是:</p> <pre><code class="prism language-python">asyncio<span class="token punctuation">.</span>tasks<span class="token keyword">class</span><span class="token class-name">Task</span><span class="token punctuation">(</span>Future<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">,</span> Generic<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>future是</p> <pre><code class="prism language-python">asyncio<span class="token punctuation">.</span>futures<span class="token keyword">class</span><span class="token class-name">Future</span><span class="token punctuation">(</span>Awaitable<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p><strong>Task它继承了Future</strong>，Future代表一个async operation在未来的最终结果。要等待这个task完成返回最终结果，我们可以使用前面提到的<code>await</code> keyword，这是因为Future是<code>Awaitable</code>的。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>     task<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">await</span> task<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo done</code></pre> <p>这里可以看到，main()中的<code>await task</code>让main等待foo执行结束后，才继续print “foo done”。</p> <p>你可能还想问，我们如何获取到task的返回结果呢？：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     task_foo<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     task_bar<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      foo_res<span class="token operator">=</span><span class="token keyword">await</span> task_foo<span class="token keyword">await</span> task_bar<span class="token keyword">print</span><span class="token punctuation">(</span>foo_res<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">"returns "</span><span class="token operator">+</span> text<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i<span class="token keyword">in</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">I am foo<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span> wake up<span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span> returns I am foo</code></pre> <p><code>res = await task</code> 可以让task的返回值被赋予到res上。</p> <p>Future同时也可以用来设置callback，当Future执行完成后，callback会被执行</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     task_foo<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     task_foo<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback<span class="token punctuation">)</span>     foo_res<span class="token operator">=</span><span class="token keyword">await</span> task_foo<span class="token keyword">print</span><span class="token punctuation">(</span>foo_res<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">"returns "</span><span class="token operator">+</span> text<span class="token keyword">def</span><span class="token function">callback</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Future has result:"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am callback"</span><span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">I am foo wake up Future has result<span class="token punctuation">:</span> returns I am foo I am callback returns I am foo</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-85830.htm">vue+element+oss实现前端分片上传和断点续传</a></p>
                                        <p>下一个：<a href="/news/article-86531.htm">动物疫苗存在的问题及解决措施（动物疫苗接种失败的原因）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-66227.htm" title="动物疫苗的储存（动物疫苗的储存温度）">动物疫苗的储存（动物疫苗的储存温度）</a></li>
                        <li class="py-2"><a href="/news/article-86531.htm" title="动物疫苗存在的问题及解决措施（动物疫苗接种失败的原因）">动物疫苗存在的问题及解决措施（动物疫苗接种失败的原因）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-24-free-high-speed-nodes.htm" title="「3月24日」最高速度18.9M/S，2025年WinXray每天更新免费节点订阅链接">「3月24日」最高速度18.9M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-80874.htm" title="动物疫苗接种时间表格图 动物疫苗接种时间表格图片">动物疫苗接种时间表格图 动物疫苗接种时间表格图片</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-13-latest-winxray-node.htm" title="「3月13日」最高速度21.6M/S，2025年WinXray每天更新免费节点订阅链接">「3月13日」最高速度21.6M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-77423.htm" title="猫三联三针间隔多久打一次疫苗（猫三联三针多久打完）">猫三联三针间隔多久打一次疫苗（猫三联三针多久打完）</a></li>
                        <li class="py-2"><a href="/news/article-72036.htm" title="宠物粮食店一年利润怎么样计算呢视频 宠物粮食店一年利润怎么样计算呢视频讲解">宠物粮食店一年利润怎么样计算呢视频 宠物粮食店一年利润怎么样计算呢视频讲解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-14-winxray-github.htm" title="「3月14日」最高速度21.9M/S，2025年WinXray每天更新免费节点订阅链接">「3月14日」最高速度21.9M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-free-node-subscribe.htm" title="「3月16日」最高速度19.8M/S，2025年WinXray每天更新免费节点订阅链接">「3月16日」最高速度19.8M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-2-latest-winxray-node.htm" title="「4月2日」最高速度21.3M/S，2025年WinXray每天更新免费节点订阅链接">「4月2日」最高速度21.3M/S，2025年WinXray每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container py-4">
            <div class="copyright">
                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                Free WinXray节点订阅站 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <div id="preloader"></div>
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/freewinxray/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/swiper/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freewinxray/waypoints/noframework.waypoints.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/freewinxray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>